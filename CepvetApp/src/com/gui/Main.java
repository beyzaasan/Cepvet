package com.gui;

import com.database.*;
import com.model.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Valar Morghulis
 */
public class Main extends javax.swing.JFrame {

    AnimalDAO dao;
    VetDAO vetDAO;
    /**
     * Creates new form MainFrame
     */
    public Main() {
        initComponents();
        dao = new AnimalDAO(); // Instantiate with your actual implementation
        vetDAO = new VetDAO(); // Instantiate with your actual implementation
    }

    JButton btnListAnimals, btnAddAnimal, btnAddSymptoms, btnShowVets;
    JPanel mainPanel, panelListAnimals, panelAddAnimal, panelAddSymptoms,panelVetList;
    JButton btnLogout;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {


        

        mainPanel = new JPanel();
        panelListAnimals = new JPanel();
        panelAddAnimal = new JPanel();
        panelAddSymptoms = new JPanel();
        panelVetList = new JPanel();

    panelListAnimals.setLayout(new BorderLayout());
    JLabel labelListAnimals = new JLabel("List of Animals:");
    btnListAnimals = new JButton("List Animals");

    // Add the label and text area to the panel
    panelListAnimals.add(labelListAnimals, BorderLayout.NORTH);
    panelListAnimals.add(btnListAnimals, BorderLayout.CENTER);

    // Similar setup for other panels
    panelAddAnimal.setLayout(new FlowLayout());
    JLabel labelAddAnimal = new JLabel("Add Animal:");
    btnAddAnimal = new JButton("Add Animal");

    panelAddAnimal.add(labelAddAnimal);
    panelAddAnimal.add(btnAddAnimal);

    panelAddSymptoms.setLayout(new FlowLayout());
    JLabel labelAddSymptoms = new JLabel("Add Symptoms:");
    btnAddSymptoms = new JButton("Add Symptoms");

    panelAddSymptoms.add(labelAddSymptoms);
    panelAddSymptoms.add(btnAddSymptoms);

    panelVetList.setLayout(new BorderLayout());
    JLabel labelVetList = new JLabel("List of Vets:");
    //JTable vetTable = new JTable(); // You may replace this with an appropriate component
    btnShowVets = new JButton("Show Vets");
    panelVetList.add(labelVetList, BorderLayout.NORTH);
    panelVetList.add(btnShowVets, BorderLayout.CENTER);

    // Now, add all panels to the mainPanel
    mainPanel.add(panelListAnimals, "Animal List");
    mainPanel.add(panelAddAnimal, "Add Animal");
    mainPanel.add(panelAddSymptoms, "Add Symptoms");
    mainPanel.add(panelVetList, "Vets");


        btnLogout = new JButton("Log out");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CEPVET");

        applyButtonStyles(btnListAnimals);
        applyButtonStyles(btnAddAnimal);
        applyButtonStyles(btnAddSymptoms);
        applyButtonStyles(btnShowVets);


        btnListAnimals.addActionListener(e -> btnListAnimalsActionPerformed(e));
        btnAddAnimal.addActionListener(e -> btnAddAnimalActionPerformed(e));
        btnAddSymptoms.addActionListener(e -> btnAddSymptomsActionPerformed(e));
        btnShowVets.addActionListener(e -> btnShowVetsActionPerformed(e));

        btnLogout.addActionListener(e -> {
            // Add code to handle logout action
            // This could include closing the current window and opening a login window, or any other logout-related actions.
            JOptionPane.showMessageDialog(this, "Logout Successful", "Logout", JOptionPane.INFORMATION_MESSAGE);
            // Example: Opening a login window
            Login loginFrame = new Login();
            loginFrame.setVisible(true);
            // Close the current window
            this.dispose();
        });
        

        mainPanel.add(panelListAnimals, "Animal List");
        mainPanel.add(panelAddAnimal, "Add Animal");
        mainPanel.add(panelAddSymptoms, "Add Symptoms");
        mainPanel.add(panelVetList, "Vets");

        // Add the mainPanel to the frame
        getContentPane().add(mainPanel, BorderLayout.CENTER);

        // Set the frame properties
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600); // Set an appropriate size
        setLocationRelativeTo(null); // Center the frame

        // Make the frame visible after adding components
        setVisible(true);
    }


    private void applyButtonStyles(JButton button) {
        button.setBackground(new java.awt.Color(153, 102, 255));
        button.setFont(new java.awt.Font("Tahoma", Font.PLAIN, 14));
        button.setForeground(new java.awt.Color(51, 51, 51));
    }

    private void btnListAnimalsActionPerformed(ActionEvent evt) {
        // Implement the action for btnListAnimals
        // Replace this with your actual implementation
        // Example: Assuming you have a method getAnimalList() in your data access object (dao)
        List<Animal> animals = AnimalDAO.getAllAnimals();
        StringBuilder animalListText = new StringBuilder("List of Animals:\n");

        for (Animal animal : animals) {
            animalListText.append("ID: ").append(animal.getAnimalId())
                    .append(", Gender: ").append(animal.getGender())
                    .append(", Breed: ").append(animal.getBreed())
                    .append(", Age: ").append(animal.getAge())
                    .append("\n");
        }

        JOptionPane.showMessageDialog(this, animalListText.toString(), "Animal List", JOptionPane.INFORMATION_MESSAGE);
    }

    private void btnAddAnimalActionPerformed(ActionEvent evt) {
        // Implement the action for btnAddAnimal
        // Replace this with your actual implementation
        // Example: Assuming you have methods to get user input and add animal in your dao
        String id = JOptionPane.showInputDialog(this, "Enter Animal ID:");
        String gender = JOptionPane.showInputDialog(this, "Enter Animal Gender:");
        String breed = JOptionPane.showInputDialog(this, "Enter Animal Breed:");
        String age = JOptionPane.showInputDialog(this, "Enter Animal Age:");
    
        // Validate inputs and add animal
        if (id != null && breed != null && gender != null && age != null) {
            Animal newAnimal = new Animal(id, gender, breed, age);
    
            if (dao.addAnimal(newAnimal)) {
                JOptionPane.showMessageDialog(this, "Animal added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add animal.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid input. Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    

    /*private void btnAddSymptomsActionPerformed(ActionEvent evt) {
        // Implement the action for btnAddSymptoms
        // Replace this with your actual implementation
        // Example: Assuming you have methods to get user input and add symptoms in your dao
        String animalId = JOptionPane.showInputDialog(this, "Enter Animal ID:");
        String symptomsInput = JOptionPane.showInputDialog(this, "Enter Symptom Names (comma-separated):");

        if (animalId != null && symptomsInput != null) {
            try {
                // Split the input into a list of symptom names
                List<String> symptoms = Arrays.asList(symptomsInput.split("\\s*,\\s*"));

                dao.addSymptoms(animalId, symptoms);
                JOptionPane.showMessageDialog(this, "Symptoms added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid input. Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }*/

    private void btnAddSymptomsActionPerformed(ActionEvent evt) {
        // Get user input for Animal ID and Symptoms
        String animalId = JOptionPane.showInputDialog(this, "Enter Animal ID:");
        String symptomsInput = JOptionPane.showInputDialog(this, "Enter Symptom Names (comma-separated):");
    
        // Validate user input
        if (animalId != null && symptomsInput != null) {
            try {
                // Split the input into a list of symptom names
                List<String> symptoms = Arrays.asList(symptomsInput.split("\\s*,\\s*"));
    
                // Add symptoms to the animal
                dao.addSymptoms(animalId, symptoms);
    
                // ----->>>>>> burda (determinemedicine methodunu animaldao'ya yazdıktan sonra) determine medicine metodu çağrılcak. aşagıdaki satırda semptom eklendikten sonra çıkan ekranda yazcak
                
                //JOptionPane.showMessageDialog(this, "Symptoms added successfully!\nUse the medicine named: " + medicineInfo + "\n Usage details are on the box. If necessary, contact our veterinarians.","Success", JOptionPane.INFORMATION_MESSAGE);
    
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid input. Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    


    private void btnShowVetsActionPerformed(ActionEvent evt) {
        // Implement the action for btnShowVets
        // Replace this with your actual implementation
        // Example: Assuming you have a method getVetList() in your data access object (dao)
        List<Vet> vets = vetDAO.getVetList();
        StringBuilder vetListText = new StringBuilder("List of Vets:\n");

        for (Vet vet : vets) {
            vetListText.append("Name: ").append(vet.getName())
                    .append(", Specialization: ").append(vet.getSpecialization())
                    .append(", Contact: ").append(vet.getContact())
                    .append("\n");
        }

        JOptionPane.showMessageDialog(this, vetListText.toString(), "Vet List", JOptionPane.INFORMATION_MESSAGE);
    }

    /*private void btnShowVetsActionPerformed(ActionEvent evt) {
        // Implement the action for btnShowVets
        // Replace this with your actual implementation
        // Example: Assuming you have a method getVetList() in your data access object (vetDAO)
        List<Vet> vets = vetDAO.getVetList();

        // Create a DefaultTableModel with column names
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Name");
        model.addColumn("Specialization");
        model.addColumn("Contact");

        // Populate the table model with data from the vets list
        for (Vet vet : vets) {
            model.addRow(new Object[]{vet.getName(), vet.getSpecialization(), vet.getContact()});
        }

        // Set the model to the JTable
        vetTable.setModel(model);
    }*/

    /*public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main mainFrame = new Main();
                
            }
        });
    }*/

}

